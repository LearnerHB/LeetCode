/*    不同的二叉搜索树
给你一个整数 n,求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？
返回满足题意的二叉搜索树的种数。
*/    
// Sol 1: 动态规划
// 思路： 遍历节点，把节点i作为root，1...(i-1)作为左子树，(i+1)...n作为右子树，递归构建
// 原问题可分解为规模较小的两个子问题，子问题的解可以复用，由此可用动态规划来解决
// 定义: G(n): 长度为n的序列能构成的不同二叉搜索树的个数； F(i,n): 以i为根、序列长度n的不同二叉搜索树的个数
// 公式1: G(n)=∑F(i,n), G(0)=1, G(1)=1;
// 对F(i,n)来说，其值等于左序列能构成的二叉搜索树个数 乘上 右序列能构成的二叉搜索树个数
// 公式2：F(i,n)=G(i-1)*G(n-i); 
// 而且可以发现G(n)和序列内容无关，只和序列长度有关
// 综合公式1/2, G(n)=∑G(i-1)*G(n-i)
class Solution {
public:
    int numTrees(int n) {
         vector<int> G(n+1, 0);
         G[0] = 1, G[1] = 1;
         for (int i = 2; i <= n; i++) {
             for (int j = 1; j < i; j++) {
                 G[i]+= G[j-1]*G[i-j];
             }
         }
    }
};