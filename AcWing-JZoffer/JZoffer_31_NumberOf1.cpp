/**	二进制中1的个数	🌟

输入一个32位整数，输出该数二进制表示中1的个数。

注意：
负数在计算机中用其绝对值的补码来表示。

样例1
输入：9
输出：2
解释：9的二进制表示是1001，一共有2个1。

样例2
输入：-2
输出：31
解释：-2在计算机里会被表示成11111111111111111111111111111110，一共有31个1。

思路
位运算，O(logn) （每次除2，最多除logn次）
迭代进行如下两步，直到 n 变成0为止：
1. 如果 n 在二进制表示下末尾是1，则在答案中加1；
2. 将 n 右移一位，也就是将 n 在二进制表示下的最后一位删掉；

难点是处理负数问题，C++中如果右移负整数，系统会自动在最高位补1，导致 n 永远不为0，死循环
可以强行将 n 转化成无符号整型，这样 n 的二进制表示不会改变，但右移时会自动在最高位补0
*/

//方法1
class Solution {
public:
    int NumberOf1(int n) {
        int res = 0;
        unsigned int un = n;
        while (un){
        	res += un & 1;
        	un >>= 1;
        }
        return res;
    }
};

//方法2
//n&(n-1)的结果：n最右边的1变成0，比如n为6:	110&101->100；循环直到n为0为止
class Solution {
public:
    int NumberOf1(int n) {
        int res = 0;
        while (n!=0){
        	n = n & (n-1);
        	res++;
        }
        return res;
    }
};






