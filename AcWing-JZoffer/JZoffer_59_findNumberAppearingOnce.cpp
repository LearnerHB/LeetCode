/**	数组中唯一只出现一次的数字	🌟🌟

在一个数组中除了一个数字只出现一次之外，其他数字都出现了三次。
请找出那个只出现一次的数字。
你可以假设满足条件的数字一定存在。

思考题：
如果要求只使用 O(n) 的时间和额外 O(1) 的空间，该怎么做呢？

样例
输入：[1,1,1,2,2,2,3,4,4,4]
输出：3

思路
这题没办法想上题一样运用异或，因为数字是以三次的形式出现
可以借助位的思想，如果一个数字出现三次，那么他的二进制表示的每一位也出现三次
可以将数组中所有数字的二进制每一位都加起来，如果某一位的和能被3整除，那单独出现的数字的该位为0
反之单独出现的数字的该位为1
*/

class Solution {
public:
    int findNumberAppearingOnce(vector<int>& nums) {
        int ans = 0;
        //为了之后计算ans的方便，我们从高位开始计算
        for (int i = 31; i >= 0; i--)	{
        	int cnt = 0;
        	for (int x : nums)
        		if (x >> i & 1)
        			cnt ++;
        	if (cnt % 3 == 1)
        		ans = ans * 2 + 1;
        	else 
        		ans = ans * 2;
        }
        return ans;
    }
};